/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Query
         * @description Answer a question using the RAG pipeline.
         */
        post: operations["query_api_query_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/conversations/{conversation_uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Conversation
         * @description Get a specific conversation by ID.
         */
        get: operations["get_conversation_api_conversations__conversation_uuid__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Models
         * @description Get list of available models.
         */
        get: operations["get_models_api_models_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/example-question": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Example Question
         * @description Get a random example question for the specified language.
         */
        get: operations["get_example_question_api_example_question_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/citations/{file_id}/{chunk_index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Citation
         * @description Get citation content by file ID and chunk index.
         */
        get: operations["get_citation_api_citations__file_id___chunk_index__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * CitationResponse
         * @description Response model for citation content endpoint.
         */
        CitationResponse: {
            /** File Id */
            file_id: string;
            /** Chunk Index */
            chunk_index: number;
            /** Content */
            content: string;
            /** Metadata */
            metadata: {
                [key: string]: unknown;
            };
            /** Total Chunks */
            total_chunks: number;
        };
        /**
         * ConversationResponse
         * @description Response model for conversation retrieval.
         */
        ConversationResponse: {
            /** Uuid */
            uuid: string;
            /** Language */
            language: string;
            /** Question */
            question: string;
            /** Answer */
            answer: string;
            /** Model */
            model: string;
            /** K */
            k: number;
            /** Created At */
            created_at: number;
            /** Generation Time Seconds */
            generation_time_seconds: number;
        };
        /**
         * ExampleQuestionResponse
         * @description Response model for example question endpoint.
         */
        ExampleQuestionResponse: {
            /** Question */
            question: string;
            /** Language */
            language: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * ModelsResponse
         * @description Response model for available models endpoint.
         */
        ModelsResponse: {
            /** Models */
            models: string[];
        };
        /**
         * QueryRequest
         * @description Request model for query endpoint.
         */
        QueryRequest: {
            /** Language */
            language: string;
            /** Question */
            question: string;
            /** Model */
            model: string;
            /** K */
            k: number;
            /** Chunk Context */
            chunk_context: number;
        };
        /**
         * QueryResponse
         * @description Response model for query endpoint.
         */
        QueryResponse: {
            /** Language */
            language: string;
            /** Question */
            question: string;
            /** Answer */
            answer: string;
            /** Conversation Id */
            conversation_id: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    query_api_query_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QueryRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_conversation_api_conversations__conversation_uuid__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                conversation_uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConversationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_models_api_models_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ModelsResponse"];
                };
            };
        };
    };
    get_example_question_api_example_question_get: {
        parameters: {
            query?: {
                language?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExampleQuestionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_citation_api_citations__file_id___chunk_index__get: {
        parameters: {
            query: {
                language: string;
            };
            header?: never;
            path: {
                file_id: string;
                chunk_index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CitationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
